import org.jreleaser.model.Active

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)
    kotlin("plugin.serialization") version "1.9.23"

    id("org.jreleaser") version "1.12.0"
    id("signing")
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
}

group = "dev.falhad"
version = "1.0.1"


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    val ktorVersion = "2.3.11"
    implementation("io.ktor:ktor-client-core:$ktorVersion")
    implementation("io.ktor:ktor-client-cio:$ktorVersion")
    implementation("io.ktor:ktor-client-logging:$ktorVersion")
    implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")

    implementation("org.slf4j:slf4j-api:2.1.0-alpha1")
    testImplementation("org.slf4j:slf4j-simple:2.1.0-alpha1")

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}



tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jreleaser {
    project {
        copyright.set("Farhad Navayazdan")
    }
    gitRootSearch.set(true)
    signing {
        active.set(Active.ALWAYS)
        armored.set(true)
    }
    deploy {
        maven {
            nexus2 {
                create("maven-central") {
                    active.set(Active.ALWAYS)
                    url.set("https://s01.oss.sonatype.org/service/local")
                    closeRepository.set(false) //todo set it to true later
                    releaseRepository.set(false) //todo set it to true later
                    stagingRepositories.add("build/staging-deploy")
                }
            }
        }
    }
}


publishing {

//    repositories {
//        maven {
//            name = "sonatypeRelease"
//            setUrl("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
//            credentials {
//                username = getExtraString("ossrhUsername")
//                password = getExtraString("ossrhPassword")
//            }
//        }
//        maven {
//            name = "sonatypeSnapshot"
//            setUrl("https://s01.oss.sonatype.org/content/repositories/snapshots/")
//            credentials {
//                username = getExtraString("ossrhUsername")
//                password = getExtraString("ossrhPassword")
//            }
//        }
//        maven {
//            val releasesRepoUrl = uri(layout.buildDirectory.dir("repos/releases"))
//            val snapshotsRepoUrl = uri(layout.buildDirectory.dir("repos/snapshots"))
//            url = if (version.toString().endsWith("SNAPSHOT")) snapshotsRepoUrl else releasesRepoUrl
//        }
//    }


    publications {
        create<MavenPublication>("Maven") {
            from(components["java"])
            groupId = "dev.falhad"
            artifactId = "zarinpal-kt"
            description = "Connect to Zarinpal payment gateway in easy way."

            pom {
                name.set("Zarinpal Kotlin SDK")
                description.set("Connect to Zarinpal payment gateway in easy way.")
                url.set("https://github.com/falhad/zarinpal-kt")
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }
                developers {
                    developer {
                        id.set("farhadnavayazdan")
                        name.set("Farhad Navayazdan")
                        email.set("cs.arcxx@gmail.com")
                    }
                }

                scm {
                    connection.set("scm:git:https://github.com/falhad/zarinpal-kt.git")
                    developerConnection.set("scm:git:https://github.com/falhad/zarinpal-kt.git")
                    url.set("https://github.com/falhad/zarinpal-kt")
                }
            }

        }

        repositories {
            maven {
                url = layout.buildDirectory.dir("staging-deploy").get().asFile.toURI()
            }
        }

    }
}
